= アジャイルとは何か

//flushright{
    山田 雄一@ditflame
//}

== アジャイルとはやり方ではなくあり方である
=== アジャイルとは

「アジャイル」という言葉が一般的になってずいぶんと経ちます。

これは例えば具体的な例でいうと、プロジェクトマネジメントの知識体系ガイドであるPMBOK(R)ガイドでは、2017年に発行された第６版より「アジャイル」の内容が初めて本文に組み込まれ、第７版からは「価値を提供する」事に重きを置いた、アジャイル的なプロジェクトマネジメントを行うための知識体系へと大きく変貌を遂げました。

https://www.pmi-japan.shop/shopdetail/000000000028/

昨今でも色々な分野に波及が止まらず相変わらずアツい「アジャイル」ですが、そもそも「アジャイル」はどういった経緯で必要となり一般的になっていったのでしょうか？

こういった場合にその思想やあり方を深く理解する為には、「アジャイル」が発生するに至ったソフトウェア開発手法の発展の歴史に触れるのが手っ取り早いです。

せっかくの機会なので、まずはアジャイルが求められるようになった背景を学んでいきましょう！

==== アジャイルが求められるようになった背景を爆速で理解しよう

そもそものソフトウェア開発の黎明期(1970年頃)は国内外を問わず、情報システム産業全体として非常にソフトウェア開発の生産性やソフトウェア品質が悪く、大きな問題となっており、これに対する色々な手法が提案されました。
(ex.ウォーターフォール型開発モデルや構造化設計プログラミング)

引用：関西情報技術士会(PEAK-IT) 2012/3 講演概要(非公開資料)より

当時（1970年頃）、ソフトウェア開発の生産性やソフトウェア品質が悪い事に対し、ITの専門家たちは開発プロセスとしてソフトウェア開発に一番近いモデルで開発を行っていると考えられた、建設分野・製造分野のプロジェクト管理手法をソフトウェア開発に適用したのが、最初の開発手法であるウォーターフォール型開発モデルです。


こらむ
建設分野・製造分野(※特にオーダーメイド品生産)の開発管理手法は「毎回、前と丸々同じものを作る事はほぼ無い」という点でソフトウェア開発手法と非常に近しく、開発管理手法が確立していなかった当時のソフトウェア開発からすると非常に革新的だったそうです。


これは開発プロジェクトを複数の作業工程に分割し、次の様な運用ルールで進めるものです。

 * 前工程が完了しないと次工程に進まない
 * 次工程に進んだあと、前工程には決して戻らない
 * 開発途中での追加や変更は原則として受け入れない

なお、このウォーターフォール型開発モデルは1998年に出た書籍でも

『ソフトウェアのプロジェクトは、家建築のプロセスに似た方法で進行する。』
※ソフトウェア工学-理論と実践(ピアソン:2001) から引用

と記載されており、少なくとも20世紀においてはウォーターフォール型開発モデル(とそれを発展させたモデル)が主たるソフトウェア開発管理手法であるとされていた様です。

またウォーターフォール型開発モデルが世に出た後、これを発展させたり応用させたり　といった形で、様々な開発モデルが考案され、実際のプロジェクトとして運用されました。
※注：アジャイル開発プロセスが世に放たれるまでの話ね

代表的なモデルを上げると次のようになります。

Ｖモデル：ウォーターフォール型開発モデルのテストの部分を設計の工程に対応させたもの

プロトタイピングモデル：ウォーターフォール型開発における、リスクと不確実性を減らすためにシステムの全部ないし一部を試作して検証し、その後システム全体を作るもの

スパイラルモデル：計画、目標・代替案・制約の決定、代替案とリスクの評価、開発とテストの各工程を何周も繰り返しながら一周ごとに設計→開発→テスト　と段階を追って進めていく事でソフトウェア開発を行うもの

このように様々な開発モデルが考案され、また実際にプロジェクトで開発手法が運用され、様々なソフトウェアが開発されてきました。

これらのモデルは概ね「開発者は顧客が要求することを最初から全て理解している」「開発者は顧客にこの先要求されることを最初から全て予測している」といった前提が成立すれば *うまくいく* *これからの変化にも耐えられる* という大前提があり、「最終の完成形のソフトウェアを作りきればその後は弄らない」というのがベースのルールになります。
※とはいえ、合わない部分が出ることはあって、その際に小規模な改修はするが、基本は大きく合わなくなれば丸ごと作り直せば良い　という前提

実際、1998年に出た本※　でも

『伝統的な「ウォーターフォール」のアプローチで開発を行うことは、今日のシステムではもはや柔軟でもふさわしくもない。』
※ソフトウェア工学-理論と実践(ピアソン桐原:2001) から引用

と記載されているのですが、じゃあここで上げた各種の開発手法がウォータフォール型開発モデルに比べ、「(特に、未来の)変化に耐えられる」か？　というと、じつはそうでもなかったのです(これは当時のソフトウェア開発手法で共通の課題であった事が伺えます)。

そして、この課題に対する一つの答え(アジャイル的な開発プロセス)が示されるにはもう少し時間が必要だったのでした。

==== スクラムが産声をあげる

時は前後して1993年、ソフトウェア開発手法としての「スクラム」が産声を上げます。

これは、1986年に野中郁次郎博士と竹内弘高博士が、当時の日本の製造業における革新的な開発手法を分析し、「スクラム」と名付けて論文発表したものを、

https://hbr.org/1986/01/the-new-new-product-development-game

1993年にJeff Sutherland、John Scumniotales、Jeff McKennaの3名がソフトウェア開発に適用した設計・分析ツールを構築し、また時を同じくして、Ken Schwaberも自社でのソフトウェア開発にこの手法を用いたものです。

その後、これらの取り組み1995年のOOPSLAカンファレンスで共同発表され、後に「アジャイルソフトウェア開発スクラム」という書籍としてまとめられた事で、一般的に知られる事になります。

https://res.cloudinary.com/mitchlacey/image/upload/v1589750939/Scrum_Guide_July_2011_i7cho9.pdf

※日本語訳の本は絶版(2003刊行) 英語板は2001年 Agile Software Development with SCRUM (Series in Agile Software Development)

※もうちょっと書き足すかも(8/24目処で)

==== XPがが産声をあげる

更に、なぜかほぼ同時期に、XP(eXtreme Programming)も産声を上げます。
※筆者としてはソフトウェア開発手法の改善に対する社会的な要請が高かったから　だろうと推測していますが。

これはKent Beck、Ward Cunningham によって生み出され、その後1996年にKent Beck は Ron Jeffries、Martin Fowler、Ron JeffriesとともにプロジェクトでXPの実践を行いました。

また、これらの実践などの知見を踏まえ、1999年 Kent Beckにより一冊の本が世に出ました。

「Extreme Programming Explained: Embrace Change」（邦題：エクストリームプログラミング）※以下、「XP本」と記載
※邦訳の第2版 https://www.ohmsha.co.jp/book/9784274217623/ は買えるよ　上の始まりの話も12章「はじまりの物語」に書いてあるよ

※XPの興りについては@fkinoさんにフォロー頂きました。


※もうちょっと修正はいるかも(8/24目処で)


=== 価値・原則・プラクティス

XPは色々と革新的でした。

その中でも、XP本でアジャイル開発における重要なポイントとして示されたものが
「価値」「原則」「プラクティス」です。

これは、XP本では次の様に記されています。

プラクティス：
＞プラクティスは日常的な取り組みである。
→これは、具体的なアクションを示すものです。

価値：
＞ある状況における好き嫌いの根源にあるものだ。
→これは、何をすべきかの判断基準を示すものです。

原則
＞その分野に特化した活動の指針である。
→これは、価値とプラクティスをつなぐための理屈や理由を示すものです。

また具体的な例として、ＸＰ本ではこれらの「価値」「原則」「プラクティス」がそれぞれ示されています。
※基本的にすべてXP本第２版ベースで記載

 * 「価値」
 * コミュニケーション(Communication)
 * シンプリシティ(Simplicity)
 * フィードバック(Feedback)
 * 勇気(Courage)
 * リスペクト(Respect)

 * 「原則」
 * 人間性(Humanity)
 * 経済性(Economics)
 * 相互利益(Mutual Benefit)
 * 自己相似性(Self-Similarity)
 * 改善(Improvement)
 * 多様性(Diversity)
 * ふりかえり(Reflection) ※スクラムでいうところのふりかえり(Retrospective)ではない　リフレクションは「内省」的な意味合いなので個人の成長　レトロスペクティブは「回顧」的な意味合いなので過去の反省で生産性の向上や対応方法の最適化を促すもの
 * 流れ(Flow)
 * 機会(Opportunity)
 * 冗長性(Redundancy)
 * 失敗(Failure)
 * 品質(Quality)
 * ベイビーステップ(Baby Steps)
 * 責任の引き受け(Accepted Responsibility)

 * 「プラクティス」※主要プラクティス
 * 全員同席(Sit Together)
 * チーム全体(Whole Team)
 * 情報満載のワークスペース(informative Workspace)
 * いきいきとした仕事(Energized Work)
 * ペアプログラミング(Pair Programming)
 * ストーリー(Stories)
 * 週次サイクル(Weekly Cycle)
 * 四半期サイクル(Quarterly Cycle)
 * ゆとり(Slack)
 * １０分ビルド(Ten-Minite Build)
 * 継続的インテグレーション(Continuous Integration)
 * テストファーストプラグラミング(Test-First Programming)
 * インクリメンタルな設計(Incremental Design)

 * 「プラクティス」※導出プラクティス
 * 本物の顧客参加(Real Customer Involvement)
 * インクリメンタルなデプロイ(Incremental Deployment)
 * チームの継続(Team Continuity)
 * チームの縮小(Shrinking Teams)
 * 根本原因分析(Root-Cause Analysis)
 * コードの共有(Shared Code)
 * コードとテスト(Code and TEsts)
 * 単一のコードベース(Single Code Base)
 * デイリーデプロイ(Daily Deployment)
 * 交渉によるスコープ契約(Negotiated Scope Contract)
 * 利用都度課金(Pay-Per-Use)

XP本でも謳われていますが、本を読むだけではその専門家にはなれず、実際にやってみて、専門家のコミュニティに参加し、そして誰かにその専門分野を教えないといけません。

これはアジャイルソフトウェア開発においては、アジャイルソフトウェア開発を実際にやってみて、コミュニティに参加し、更に誰かにそれを伝える事で専門家になれる　という事になります。

なぜそんな話になるかというと、「価値」がズレてしまうと駄目だし、「プラクティス」だけをなぞってもうまく行かないもので、結局それをつなぐための「原則」がしっかりして、さらにこれら３つを一体で使わないと、うまくいかない（アジャイルとして本来ある形になれない）からです。

また、これらを繋ぐポイントとして、具体的な言語化が難しい「アジャイルマインド」が大事だね　ということになります。

=== Do AgileからBe Agileへ

そもそもアジャイルというのは　「機敏な」「敏しょうな」を示す英単語で、*形容詞*です。
※ここの引用は何がいいんでしょうね　普通の英和辞典でいい気はするんですがなにか引用はいりそう
https://eow.alc.co.jp/search?q=agile
見たのはこれなんですが…

このため、アジャイルを導入した最初の頃は「意図してアジャイルを進める」時期は必要なのですが、本来のありようとしては「アジャイルをする」ではなく、「（その開発手法が）アジャイルである」　という状態に到達した状態が本来の姿で正しい　ということになります。
※最近流行りの鬼を滅する漫画でいうと、アジャイルの呼吸壱の型みたいな話。ニュートラルにその状態である必要がある

== アジャイルソフトウェア開発宣言(4つの価値と12の原則)

=== アジャイルソフトウェア開発宣言とは

スクラムやXPが本が出て一般的になり、その真意が伝わらず「アジャイル開発」を銘打っているが、実態はそうではなかったプロジェクトが多く発生したようで、これに対するアンサーでもあるのですが、2001年に「アジャイルソフトウェア開発宣言(Agile Manifest)」が世に出ます。

https://agilemanifesto.org/iso/ja/manifesto.html
※これは日本語版

ここでは、4つの価値とそれの元となる12の原則が示されました。

＜ここからまるまる引用、実際に初校では上の画像そのまま持ってきてもらうのが良いのかも……＞

アジャイルソフトウェア開発宣言

私たちは、ソフトウェア開発の実践
あるいは実践を手助けをする活動を通じて、
よりよい開発方法を見つけだそうとしている。
この活動を通して、私たちは以下の価値に至った。

プロセスやツールよりも*個人と対話*を、
包括的なドキュメントよりも*動くソフトウェア*を、
契約交渉よりも*顧客との協調*を、
計画に従うことよりも*変化への対応*を、

価値とする。すなわち、左記のことがらに価値があることを
認めながらも、私たちは右記のことがらにより価値をおく。

Kent Beck
Mike Beedle
Arie van Bennekum
Alistair Cockburn
Ward Cunningham
Martin Fowler
James Grenning
Jim Highsmith
Andrew Hunt
Ron Jeffries
Jon Kern
Brian Marick
Robert C. Martin
Steve Mellor
Ken Schwaber
Jeff Sutherland
Dave Thomas

© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に
自由にコピーしてよい。

＜ここからまるまる引用、ここまで＞

=== アジャイル宣言の背後にある12の原則
また、アジャイル開発宣言に併せて、12の原則　も公表されました。これは次のようなものです。

https://agilemanifesto.org/iso/ja/principles.html
※これも同じく日本語版

＜ここからまるまる引用、ここはどうしてもらうのが綺麗かなぁ＞
12の原則

私たちは以下の原則に従う:

(1)顧客満足を最優先し、
価値のあるソフトウェアを早く継続的に提供します。

(2)要求の変更はたとえ開発の後期であっても歓迎します。
変化を味方につけることによって、お客様の競争力を引き上げます。

(3)動くソフトウェアを、2-3週間から2-3ヶ月という
できるだけ短い時間間隔でリリースします。

(4)ビジネス側の人と開発者は、プロジェクトを通して
日々一緒に働かなければなりません。

(5)意欲に満ちた人々を集めてプロジェクトを構成します。
環境と支援を与え仕事が無事終わるまで彼らを信頼します。

(6)情報を伝えるもっとも効率的で効果的な方法は
フェイス・トゥ・フェイスで話をすることです。

(7)動くソフトウェアこそが進捗の最も重要な尺度です。

(8)アジャイル･プロセスは持続可能な開発を促進します。
一定のペースを継続的に維持できるようにしなければなりません。

(9)技術的卓越性と優れた設計に対する
不断の注意が機敏さを高めます。

(10)シンプルさ（ムダなく作れる量を最大限にすること）が本質です。

(11)最良のアーキテクチャ・要求・設計は、
自己組織的なチームから生み出されます。

(12)チームがもっと効率を高めることができるかを定期的に振り返り、
それに基づいて自分たちのやり方を最適に調整します。

＜ここからまるまる引用、ここまで＞


前述の4つの価値と対応する12の原則を紐づけると次のようになります。
※筆者の独断と偏見によるものです

プロセスやツールよりも*個人と対話*を、：(4)(5)(6)(11)(12)

包括的なドキュメントよりも*動くソフトウェア*を、：(1)(3)(7)(10)

契約交渉よりも*顧客との協調*を、：(1)(2)(4)(5)(6)(12)

計画に従うことよりも*変化への対応*を、：(2)(3)(6)(8)(9)(10)

あくまで1:1で対応しているのではなく、宣言と原則が相互に作用し合っていることがわかります。

こういったアジャイルの価値と原則を大事にしつつ、現在もアジャイルは世界中で推進されています。

※※※※※※※※※※※※※※※※※※※※※
※　ここからかきかけ

=== 国内でのアジャイルの興り

さて、海外の話ばかりでもなんなので、最後にアジャイルに関する国内事情がどうだったのかも見てみましょう。

海外の歴史は「スクラム」→「XP」の順でしたが、日本でブームになったのは実は逆で、「XP」がまず有名になり、その後「スクラム」が浸透していった　という歴史があります。

XPについては、2001年頃から情報処理学会の刊行物(会誌、論文誌)では情報が出始め、2002年3月、4月の会誌でXPについてのまとまった情報が掲載されたことが契機

※スクラムは現在調査中


また当時の雑誌媒体についても2誌で情報を調べてみたところ、確かに情報が出てきたのも同様の順でした。

●ＸＰ
Software Design誌(2005/08 号)
2002年8月号からエクストリームプログラミングについての記載が出始め、200209 antの記事　「これでわかった！ＸＰの使い方」で一般に公開されたっぽい

※メモ：
C:\works\総集編\SD2000-2009\pdf\2002\09\200209_178-197.pdf

WebDBPress誌(2001/11/15) Vol.5 のPHPこども電話相談室　が最初
※ただしUnit Test（単体テスト）の為のクラス PhpUnitを取り上げたもの
※あんまりガッツリした記事はしばらくない

※メモ
C:\works\総集編\webDB_full\webdb_pdf\webdb_vol05.pdf

●スクラム
Software Design誌(2005/08 号)
「緊急レポート！　最新ソフトウェア開発手法事情　繰り返し型開発の落とし穴　失敗から学ぶ効果的運用　chapter4」が最初
（とはいえあまりガッツリした内容ではないが）

※メモ
C:\works\総集編\SD2000-2009\pdf\2005\08\200508_133-172.pdf

WebDBPress誌(2008/5/25) vol.44

※メモ
C:\works\総集編\webDB_full\webdb_pdf\webdb_vol44.pdf


日本でのアジャイルの興りは2002~3年頃に来た、XPブームがおそらく最初のビッグウェーブです。

コラム？
実際、XPは革新的であった　というよりは革新的すぎて、国内でも話題になった時は大きな衝撃を伴うものでした。
XPが話題になった当時、筆者は大手のSIerでシステム開発に従事していたのですが、「言ってる事はわかるけど社内でコレ適用できんの？」みたいな話題で盛り上がった事を今でも鮮明に覚えています。
※なお、SIerが当時一般的に行っていた受諾開発とXPは基本的に食い合わせが悪く、筆者は結局その会社ではアジャイル的なプロジェクトに従事する事は無かったのでした。


＜＜余談＞＞
※XPは当時(2002～3年ぐらい)としては、あまりに先進的すぎた色々なアプローチがバズワード化してしまったり……と、それはそれで当時はネタにもされたものではあった（特にSIなんかだと）

「何故か2人で1つのPC使ってコード書くらしいで」
「テストから先に書くの？」
「めちゃくちゃ小さい粒度でプログラム書くらしいで」
「ユーザーも設計開発に参加すんの？」

みたいな。

国内的な事情としては、アメリカの企業は基本的に自社システムは社内でシステムを内製するが、日本の企業はSIer(システムインテグレーター)にシステムを外注する　という業務システムに対する開発体制の大きな差があり、こういった差をXPでは埋められなかった的な話はありそうだな……と思っています。
＜＜余談ここまで＞＞





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ここから下はメモ



== アジャイルといっても色々ある
具体的なアジャイルプロセスについて言及しとかないと、その先のスクラムの話とかいきなり出てきても乖離しねえ？という…

=== SCRUM

その後、Jeff Sutherlandはこれを整理・構築し2011年に、「スクラムガイド」をまとめ上げる。

最新のスクラムガイドは
https://scrumguides.org/　で読める
邦訳版はこれ
https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf


=== XP(eXtreme Programing)

=== その他
スピナッチキューブとかkintoneSIGNPOSTとか？










1章は完全追加ですね。
あり方であるとか、
4つの価値、12の原則をもっと丁寧に説明する。
そのうえで、各章がどうかかわるかを書いて導入にする。

また、あとのそれぞれの章も、その原則に基づきどうしてそうなるのか、その価値は？みたいな観点で加筆修正する感じかな。

● 第1章 アジャイルとは何か＜★新設★ JK、ふーれむ＞
○ 1-1 アジャイルとはやり方ではなくあり方である
■ 1-1-1 アジャイルとは
■ 1-1-2 価値・原則・プラクティス
■ 1-1-3 Do AgileからBe Agileへ
○ 1-2 アジャイル開発宣言4つの価値と12の原則
■ 1-2-1 アジャイルソフトウェア開発宣言とは
■ 1-2-2 アジャイル宣言の背後にある12の原則



https://www.ipa.go.jp/jinzai/skill-standard/plus-it-ui/itssplus/ps6vr70000001i7c-att/000065601.pdf

アジャイル領域へのスキル変革の指針
アジャイルソフトウェア開発宣言の読みとき方