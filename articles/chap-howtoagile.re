= アジャイルとは何か

//flushright{
    山田 雄一@ditflame
//}

== アジャイルとはやり方ではなくあり方である
=== アジャイルとは

==== アジャイルが求められるようになった背景を爆速で理解しよう

そもそものソフトウェア開発の黎明期(1970年頃)は国内外を問わず、情報システム産業全体として非常にソフトウェア開発の生産性やソフトウェア品質が悪く、大きな問題となっており、これに対する色々な手法が提案された。
(ex.ウォーターフォール型開発モデルや構造化設計プログラミング)

引用：関西情報技術士会(PEAK-IT) 2012/3 講演概要(非公開資料)より


ソフトウェア開発の生産性やソフトウェア品質が悪い事に対し、開発プロセスとして近いと当時考えられた、建設分野・製造分野のプロジェクト管理手法をソフトウェア開発に適用したのが、ウォーターフォール型開発モデルであり、これは開発プロジェクトを複数の作業工程に分割し、次の様な運用ルールで進めるものである。

 * 前工程が完了しないと次工程に進まない
 * 次工程に進んだあと、前工程には決して戻らない
 * 開発途中での追加や変更は原則として受け入れない

なお、このウォーターフォール型開発モデルは1998年に出た書籍でも

『ソフトウェアのプロジェクトは、家建築のプロセスに似た方法で進行する。』
※ソフトウェア工学-理論と実践(ピアソン:2001) から引用

と記載されており、ウォーターフォール型開発モデルが主たるソフトウェア開発モデルとされていた。

ウォーターフォール型開発モデルが世に出た後、様々な開発モデルが考案された。
※注：アジャイル開発プロセスが世に放たれるまでの話ね

Ｖモデル：ウォーターフォール型開発モデルのテストの部分を設計の工程に対応させたもの

プロトタイピングモデル：ウォーターフォール型開発における、リスクと不確実性を減らすためにシステムの全部ないし一部を試作して検証し、その後システム全体を作るもの

スパイラルモデル：計画、目標・代替案・制約の決定、代替案とリスクの評価、開発とテストの各工程を何周も繰り返しながら一周ごとに設計→開発→テスト　と段階を追って進めていく事でソフトウェア開発を行うもの


様々な開発モデルが考案され、また実際に様々なソフトウェアが開発されてきたが、これらのモデルは概ね「開発者は顧客が要求することを最初から全て理解している」「開発者は顧客にこの先要求されることを最初から全て予測している」といった前提が成立すれば *うまくいく* *これからの変化にも耐えられる* という前提によるもので、実際に1998年に出た本※　でも

『伝統的な「ウォーターフォール」のアプローチで開発を行うことは、今日のシステムではもはや柔軟でもふさわしくもない。』
※ソフトウェア工学-理論と実践(ピアソン桐原:2001) から引用

と記載されているのだが、じゃあこの本に記載されている他の開発手法が「変化に耐えられる」か？というと、じつはそうでもない。

こういった事からも、当時(2000年前後)はアジャイル的な開発プロセスが一般的になるにはもうちょっとだけ時間が必要だった事が伺える。

==== スクラムが産声をあげる
時は前後して1993年、スクラムが産声を上げる。

これは、1986年に野中郁次郎博士と竹内弘高博士が、当時の日本の製造業における革新的な開発手法を分析し、「スクラム」と名付けて論文発表したものを、

https://hbr.org/1986/01/the-new-new-product-development-game


1993年にJeff Sutherland、John Scumniotales、Jeff McKennaの3名がこの論文をソフトウェア開発に適用した設計・分析ツールを構築し、また時を同じくして、Ken Schwaberも自社でのソフトウェア開発にこの手法を用いた。

1995年のOOPSLAカンファレンスで共同発表されたこれらの取り組みは後に「アジャイルソフトウェア開発スクラム」という書籍としてまとめられ、一般に知られる事になる。

https://res.cloudinary.com/mitchlacey/image/upload/v1589750939/Scrum_Guide_July_2011_i7cho9.pdf


==== ＸＰの爆誕
更に1999年 Kent Beckにより一冊の本が世に出た。

「Extreme Programming Explained: Embrace Change」
（邦題：エクストリームプログラミング）XP本と記載

※邦訳の第2版 https://www.ohmsha.co.jp/book/9784274217623/

=== 価値・原則・プラクティス

エクストリームプログラミングは色々と革新的であった

※革新的であった　というよりは革新的すぎた　これが国内で話題になった頃は筆者はSIerでシステム開発に従事していたが、「言ってる事はわかるけど社内でコレ適用できんの？」みたいな話題で盛り上がった事を今でも鮮明に覚えている。（SIerが一般的に当時行っていた受諾開発とは食い合わせが悪く、筆者は結局その会社ではアジャイル的なプロジェクトに従事する事は無かった）

XP本の中でも中心となる理論が「価値・原則・プラクティス」である

これは、XP本では次の様に記されている。

プラクティス：
>プラクティスは日常的な取り組みである。
→具体的なアクション？

価値：
→何をすべきかの判断基準
＞ある状況における好き嫌いの根源にあるものだ。

原則
＞その分野に特化した活動の指針である。
→価値とプラクティスをつなぐための理屈

XP本でも謳われているが、本を読むだけではその専門家にはなれず、実際にやってみて、専門家のコミュニティに参加し、そして誰かにその専門分野を教えないといけない。

これは、アジャイルソフトウェア開発においては、アジャイルソフトウェア開発を実際にやってみて、コミュニティに参加し、更に誰かにそれを伝える事で専門家になれる　という事になる。

なぜそんな話になるかというと、価値が狂うとダメで　プラクティスだけでもだめで、
結局それをつなぐための原則がしっかりして、3つを一体で運用しないとうまくいかない　という話になる。

なのでこれらをうまく回せるためのキーとなる「アジャイルマインド」が大事だね　ということを言っている。

※そうなんだけど、XPは当時としては先進的すぎた色々なアプローチがバズワード化してしまったりとそれはそれで当時はネタにもされたものではあった（特にSIなんかだと）

「何故か2人で1つのPC使ってコード書くらしいで」
「テストから先に書くの？」
「めちゃくちゃ小さい粒度でプログラム書くらしいで」
「ユーザーも設計開発に参加すんの？」

みたいな。

国内的な事情としては、アメリカの企業は基本的に自社システムは社内でシステムを内製するが、日本の企業はSIer(システムインテグレーター)にシステムを外注する　という差があり、こういう差をXPでは埋められなかった的な話はありそう……

=== Do AgileからBe Agileへ

意図してアジャイルを進める状態から、呼吸をするように自然とアジャイルしている状態になろう

つーかそもそも「アジャイル」って形容詞なんだよね
https://www.slideshare.net/slideshow/ss-84433167/84433167

アジャイルをする　ではなく、　アジャイルである　という状態に到達するのが正しいはず。（形容詞なので自然とそうなってないといけないという話になる。意図してやったら動詞なので……）
※最近流行りの鬼を滅するアニメでいうと、アジャイルの呼吸壱の型みたいな話

== アジャイルソフトウェア開発宣言(4つの価値と12の原則)

=== アジャイルソフトウェア開発宣言とは
2001年、「アジャイルソフトウェア開発宣言(Agile Manifest)」が世に出る。

https://agilemanifesto.org/iso/ja/manifesto.html

ここでは、4つの価値とそれの元となる12の原則が示される。

アジャイルソフトウェア開発宣言

私たちは、ソフトウェア開発の実践
あるいは実践を手助けをする活動を通じて、
よりよい開発方法を見つけだそうとしている。
この活動を通して、私たちは以下の価値に至った。

プロセスやツールよりも*個人と対話*を、
包括的なドキュメントよりも*動くソフトウェア*を、
契約交渉よりも*顧客との協調*を、
計画に従うことよりも*変化への対応*を、

価値とする。すなわち、左記のことがらに価値があることを
認めながらも、私たちは右記のことがらにより価値をおく。

Kent Beck
Mike Beedle
Arie van Bennekum
Alistair Cockburn
Ward Cunningham
Martin Fowler
James Grenning
Jim Highsmith
Andrew Hunt
Ron Jeffries
Jon Kern
Brian Marick
Robert C. Martin
Steve Mellor
Ken Schwaber
Jeff Sutherland
Dave Thomas

© 2001, 上記の著者たち
この宣言は、この注意書きも含めた形で全文を含めることを条件に
自由にコピーしてよい。




=== アジャイル宣言の背後にある12の原則
https://agilemanifesto.org/iso/ja/principles.html

12の原則

私たちは以下の原則に従う:

(1)顧客満足を最優先し、
価値のあるソフトウェアを早く継続的に提供します。

(2)要求の変更はたとえ開発の後期であっても歓迎します。
変化を味方につけることによって、お客様の競争力を引き上げます。

(3)動くソフトウェアを、2-3週間から2-3ヶ月という
できるだけ短い時間間隔でリリースします。

(4)ビジネス側の人と開発者は、プロジェクトを通して
日々一緒に働かなければなりません。

(5)意欲に満ちた人々を集めてプロジェクトを構成します。
環境と支援を与え仕事が無事終わるまで彼らを信頼します。

(6)情報を伝えるもっとも効率的で効果的な方法は
フェイス・トゥ・フェイスで話をすることです。

(7)動くソフトウェアこそが進捗の最も重要な尺度です。

(8)アジャイル･プロセスは持続可能な開発を促進します。
一定のペースを継続的に維持できるようにしなければなりません。

(9)技術的卓越性と優れた設計に対する
不断の注意が機敏さを高めます。

(10)シンプルさ（ムダなく作れる量を最大限にすること）が本質です。

(11)最良のアーキテクチャ・要求・設計は、
自己組織的なチームから生み出されます。

(12)チームがもっと効率を高めることができるかを定期的に振り返り、
それに基づいて自分たちのやり方を最適に調整します。


前述の4つの価値と対応する12の原則を紐づけると次のようになります。

プロセスやツールよりも*個人と対話*を、：(4)(5)(6)(11)(12)

包括的なドキュメントよりも*動くソフトウェア*を、：(1)(3)(7)(10)

契約交渉よりも*顧客との協調*を、：(1)(2)(4)(5)(6)(12)

計画に従うことよりも*変化への対応*を、：(2)(3)(6)(8)(9)(10)








~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ここから下はメモ



== アジャイルといっても色々ある
具体的なアジャイルプロセスについて言及しとかないと、その先のスクラムの話とかいきなり出てきても乖離しねえ？という…

=== SCRUM

その後、Jeff Sutherlandはこれを整理・構築し2011年に、「スクラムガイド」をまとめ上げる。

最新のスクラムガイドは
https://scrumguides.org/　で読める
邦訳版はこれ
https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf


=== XP(eXtreme Programing)

=== その他
スピナッチキューブとかkintoneSIGNPOSTとか？










1章は完全追加ですね。
あり方であるとか、
4つの価値、12の原則をもっと丁寧に説明する。
そのうえで、各章がどうかかわるかを書いて導入にする。

また、あとのそれぞれの章も、その原則に基づきどうしてそうなるのか、その価値は？みたいな観点で加筆修正する感じかな。

● 第1章 アジャイルとは何か＜★新設★ JK、ふーれむ＞
○ 1-1 アジャイルとはやり方ではなくあり方である
■ 1-1-1 アジャイルとは
■ 1-1-2 価値・原則・プラクティス
■ 1-1-3 Do AgileからBe Agileへ
○ 1-2 アジャイル開発宣言4つの価値と12の原則
■ 1-2-1 アジャイルソフトウェア開発宣言とは
■ 1-2-2 アジャイル宣言の背後にある12の原則



https://www.ipa.go.jp/jinzai/skill-standard/plus-it-ui/itssplus/ps6vr70000001i7c-att/000065601.pdf

アジャイル領域へのスキル変革の指針
アジャイルソフトウェア開発宣言の読みとき方